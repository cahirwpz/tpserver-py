#! /usr/bin/env python 
"""
tool <game> <action> [<arguments>]

This tool lets you do admin type stuff to your server database.

<game>
	Name of the "game" (which is also equal to the database used by this game).

<action>
	Action to preform.

	Possible actions include,

	--create
		Create a new game.

	--delete
		Delete a game.

	--generate <key> <min number> <max number>
		Generates a universe for the game. 
		Will use the key in the random number generator, use -1 to use the 
		current unix timestamp.

		Will use the max/min numbers as a guide to how many objects to create
		per system.

		If called with the same key, max, min number the universe should be 
		exactly the same.

	--adduser <username> <password>
		Adds a new user to the game.
	
	--deluser <username>
		Removes a user from the game.
"""


import sys
sys.path.append("/etc/tpserver-py")
import config

import random

from tp.server.utils import *
from tp.server.db import dbconn

from tp.server.utils import ReparentOne
from tp.server.bases.User import User
from tp.server.bases.Board import Board
from tp.server.bases.Message import Message
from tp.server.bases.Object import Object

SIZE = 10000000

class Commands:
	def addgame(longname, ruleset, admin, comment):
		"""\
		--addgame <ruleset> <name> <admin email> <comment>
			Add a new game to the server
"""
		from tp.server.bases.Game import Game

		# Check the game doesn't already exist
		shortname = Game.munge(longname)
		try:
			Game.gameid(shortname)
			print "That game name is already taken! Please try again with a different or remove that game first."
			return
		except KeyError:
			pass

		# Okay create a new game then
		g = Game()

		# Check that this is a valid ruleset
		try:
			g.ruleset  = ruleset
		except ImportError, e:
			print e
			print "That ruleset does not exist! Please check your spelling or install the correct module."
			return

		g.shortname= shortname
		g.longname = longname
		g.admin    = admin
		g.comment  = comment
		g.turn     = 0
		g.commandline=" ".join(sys.argv)
		g.save()

		g.ruleset.initalise()

		print "Game successfully created!"
		print "You can use the '%s' shortname when running programs in the future." % shortname
		print
		print "You probably want to populate the universe now. See the --populate command."
	addgame = staticmethod(addgame)		

	def delgame(name):
		"""\
		--delgame
			Remove a game from the server.
"""
		from tp.server.bases.Game import Game

		# Check the game exists
		id = Game.gameid(Game.munge(longname))
		g = Game(id=id)
		
		# Now go around and clean up everything.... but how?
		pass

	def help(*args, **kw):
		"""\
		--help
			Get help about using this program.
		"""
		print """
This command lets you change things on the local server.
"""

		for name in dir(Commands):
			if name.startswith('__'):
				continue
			if getattr(Commands, name).__doc__ is None:
				continue

			print getattr(Commands, name).__doc__.replace('\t\t', '')

	help = staticmethod(help)	


def main():
	# Special case for not enough arguments
	if len(sys.argv) <= 1 or sys.argv[1][:2] != '--':
		Commands.help()
		return

	trans = dbconn.begin()

	cmd = sys.argv[1][2:]
	if not hasattr(Commands, cmd):
		cmd = 'help'

	try:
		getattr(Commands, cmd)(*sys.argv[2:])
	except:
		print "Rolling back..."
		trans.rollback()
		raise
	else:
		trans.commit()
	
if __name__ == "__main__":
	main()


