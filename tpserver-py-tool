#! /usr/bin/env python 

import sys
sys.path.append("/etc/tpserver-py")
import config

import random

from tp.server.utils import *
from tp.server.db import dbconn
from tp.server.bases.SQL  import NoSuch
from tp.server.bases.Game import Game, Lock

class Commands:

	def addgame(longname, ruleset, admin, comment):
		"""\
		--addgame <game> <ruleset> <admin email> <comment>
			Add a new game to the server
"""
		# Check the game doesn't already exist
		shortname = Game.munge(longname)
		try:
			Game.gameid(shortname)
			print "That game name is already taken! Please try again with a different or remove that game first."
			return
		except NoSuch:
			pass

		# Okay create a new game then
		g = Game()

		# Check that this is a valid ruleset
		try:
			g.ruleset  = ruleset
		except ImportError, e:
			print e
			print "That ruleset does not exist! Please check your spelling or install the correct module."
			return

		g.shortname= shortname
		g.longname = longname
		g.admin    = admin
		g.comment  = comment
		g.turn     = 0
		g.commandline=" ".join(sys.argv)
		g.save()

		g.ruleset.initalise()

		print "Game successfully created!"
		print "You can use the '%s' shortname when running programs in the future." % shortname
		print
		print "You probably want to populate the universe now. See the --populate command."
	addgame = staticmethod(addgame)		

	def delgame(game):
		"""\
		--delgame <game>
			Remove a game from the server.
"""

		# Check the game exists
		g = Game(longname=game)
		
		# Now go around and clean up everything.... but how?
		pass

	def populate(game, *args, **kw):
		"""\
		--populate <game> --help
			Find out what arguments populate takes for this game's ruleset.

		--populate <game> <ruleset arguments>
			Populates will populate a game with "things". What things means
			depends on the the ruleset.
"""
		r = Game(longname=game).ruleset
		if len(args) == 0 or args[0] == '--help':
			print r.populate.__doc__.replace('\t\t', '')
		else:
			r.populate(*args, **kw)

	populate = staticmethod(populate)

	def adduser(game, username, password, email=None, comment=None):
		"""\
		--player <game> <username> <password> [<email>, <comment>]
			Add a new player to the game.
		"""
		r = Game(longname=game).ruleset

		if comment is None:
			r.player(username, password)
		elif email is None:
			r.player(username, password, email)
		else:
			r.player(username, password, email, comment)

	adduser = staticmethod(adduser)

	def turn(game, number=1):
		"""\
		--turn <game> [<number>]
			Generate <number> turns. Number defaults to one.
		"""
		r = Game(longname=game).ruleset
		
		for i in range(0, number):
			r.turn()

	turn = staticmethod(turn)

	def help(*args, **kw):
		"""\
		--help
			Get help about using this program.
		"""
		print """
This command lets you change things on the local server.
"""

		for name in dir(Commands):
			if name.startswith('__'):
				continue
			if getattr(Commands, name).__doc__ is None:
				continue

			print getattr(Commands, name).__doc__.replace('\t\t', '')

	help = staticmethod(help)	

	def status(*args, **kw):
		"""
		--status
			Lists the games and locks in the database.
		"""
		for id, modtime in Game.ids():
			g = Game(id)
			dbconn.use(g)
			print g

			locks = Lock.ids()
			if len(locks) > 0:
				for id, modtime in locks:
					print '\t', Lock(id)			
			else:
				print '\t No locks'
	status = staticmethod(status)


def main():
	# Special case for not enough arguments
	if len(sys.argv) <= 1 or sys.argv[1][:2] != '--':
		Commands.help()
		return

	cmd = sys.argv[1][2:]
	if not hasattr(Commands, cmd):
		cmd = 'help'

	getattr(Commands, cmd)(*sys.argv[2:])
	
if __name__ == "__main__":
	main()


