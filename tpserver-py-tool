#!/usr/bin/env python 

import requirements

from cmd import Cmd as CommandLineInterface

from tp.server.configuration import CLIConfigurator, ConfigurationError
from tp.server.model import *
from tp.server.rules import RulesetManager
from tp.server.gamemanager import GameManager

DatabaseManager()

from contextlib import contextmanager

@contextmanager
def PrettyFrame( kind, inst ):
	prologue = "---=[ %s: %s ]=" % (kind, inst)
	prologue += "-" * (80 - len(prologue))
	print prologue
	print ""
	yield
	print ""

class GameMenu( CommandLineInterface ):
	def __init__( self, game ):
		CommandLineInterface.__init__( self )

		self.prompt = "(Game: %s) " % game.name
		self.game   = game

	def do_q( self, remainder ):
		return True

	do_quit = do_q

	def do_populate( self, line ):
		"""
		--populate <game> --help
			Find out what arguments populate takes for this game's ruleset.

		--populate <game> <ruleset arguments>
			Populates will populate a game with "things". What things means
			depends on the the ruleset.
		"""

		words = [ int( word ) for word in line.split() ]

		self.game.ruleset.populate( *words )

	def do_reset( self, line ):
		self.game.reset()
	
	def do_player( self, line ):
		"""
		player add <username> <password> [<email>, <comment>]
			Add a new player to the game.
		"""
		words = line.split()

		try:
			what, args = words[0], words[1:]
		except IndexError:
			self.do_help( "player" )
		else:
			if what == 'add' and len(args) in range(2,5):
				self.player_add( self.game, *args )
			else:
				self.do_help( "player" )

	@staticmethod
	def player_add( game, username, password, email = None, comment = None ):
		r = game.ruleset

		if comment is None:
			r.player(username, password)
		elif email is None:
			r.player(username, password, email)
		else:
			r.player(username, password, email, comment)

	def do_turn( self, line ):
		number = 1
		"""
		--turn <game> [<number>]
			Generate <number> turns. Number defaults to one.
		"""
		r = self.game.ruleset
		
		for i in range(0, int(number)):
			r.turn()

	@staticmethod
	def status(*args, **kw):
		"""
		--status
			Lists the games and locks in the database.
		"""
		for id, modtime in Game.ids():
			g = Game(id)
			dbconn.use(g)
			print g

			locks = Lock.ids()
			if len(locks) > 0:
				for id, modtime in locks:
					print '\t', Lock(id)			
			else:
				print '\t No locks'

	@staticmethod
	def cleanup(*args, **kw):
		"""\
		--cleanup
			Try and remove any stale locks which still exist.
		"""
		Lock.cleanup()

class MainMenu( CommandLineInterface ):
	def __init__( self ):
		CommandLineInterface.__init__( self )
		self.prompt = "(Main) "

	@property
	def subcmd_list( self ):
		return [ "games", "rulesets" ] 
	
	def complete_list( self, text, line, begidx, endidx ):
		words = line.split()[1:]

		if len( words ) == 0:
			return self.subcmd_list
		elif len( words ) == 1:
			return filter( lambda s: s.startswith( words[-1] ), self.subcmd_list )
		else:
			return []

	def do_list( self, line ):
		"""
		List objects of given kind.

		Usage:
			list <kind>

		Options:
			kind = games | rulesets
		"""
		what = line.split()[0]

		if what == 'games':
			self.list_games()
		elif what == 'rulesets':
			self.list_rulesets()
		else:
			self.do_help( "list" )
	
	@staticmethod
	def list_games():
		with DatabaseManager().session() as session:
			for game in session.query( Game ).all():
				with PrettyFrame( "game", game.name ):
					for line in [ ('long name', game.longname), ('ruleset', str(game.ruleset)), ('turn', game.turn), ('administrator', game.admin), ('comment', game.comment), ('last modified', game.mtime) ]:
						print "%14s: %s " % line
			print "-" * 80
	
	@staticmethod
	def list_rulesets():
		for name, ruleset in sorted( RulesetManager().ruleset.items() ):
			with PrettyFrame( "ruleset", name ):
				for line in ruleset().information:
					print "%8s: %s " % line
		print "-" * 80

	@property
	def subcmd_game( self ):
		return [ "use", "add", "remove" ]

	def complete_game( self, text, line, begidx, endidx ):
		words = line.split()[1:]

		if len( words ) == 0:
			return self.subcmd_game
		elif len( words ) == 1:
			return filter( lambda s: s.startswith( words[-1] ), self.subcmd_game )
		else:
			return []

	def do_game( self, line ):
		"""
		game add    - Add a new game to the server.
		game remove - Remove a game from the server.
		game use    - Manage a game on the server.
		
		Usage:
			game add <name> <long name> <ruleset> <admin email> <comment>
			game remove <name>
			game use <name>
		"""
		words = line.split()

		try:
			what, args = words[0], words[1:]
		except IndexError:
			self.do_help( "game" )
		else:
			if what == 'add' and len(args) == 5:
				self.game_add( *args )
			elif what == 'remove' and len(args) == 1:
				self.game_remove( *args )
			elif what == 'use' and len(args) == 1:
				self.game_use( *args )
			else:
				self.do_help( "game" )

	@staticmethod
	def game_add( name, longname, ruleset, admin, comment ):
		try:
			GameManager().addGame( name, longname, ruleset, admin, comment )

			print "Game successfully created! You can use the '%s' name as game identifier." % name
			print ""
			print "You probably want to populate the universe now."
		except AlreadyExists, ex:
			print "Error:", ex
			print ""
			print "Please try again with a different name or remove that game first."

	@staticmethod
	def game_remove( name ):
		try:
			GameManager().removeGame( name )
		except NoSuchThing, ex:
			print "Error:", ex
	
	@staticmethod
	def game_use( name ):
		try:
			game = GameManager()[ name ]
		except KeyError, ex:
			print "Error:", ex
		else:
			menu = GameMenu( game )
			menu.cmdloop()

	def do_q( self, remainder ):
		return True

	do_quit = do_q

def main():
	configurator = CLIConfigurator( "Thousand Parsec Administration Tool" )
	configurator.registerComponent( DatabaseManager(), DatabaseConfiguration() )

	try:
		configurator.configParse()
		configurator.configCommit()
	except ConfigurationError, ex:
		configurator.help()

		raise SystemExit( '\033[31;1mConfiguration error:\033[0m %s' % ex )

	GameManager()
	RulesetManager()

	try:
		menu = MainMenu()
		menu.cmdloop()
	except KeyboardInterrupt:
		menu.onecmd("quit")
		print "quit"

if __name__ == "__main__":
	main()
