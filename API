
How objects work
==================================================
See the sobjects directory for examples.

How orders work
==================================================
Orders are given to an object by a player. They take some time and
preform some action. An example would be Move. See sorders directory
for examples.


class ABC(Order):
	"""\
A doc string must exist otherwise the order won't work.
"""
	attributes = {\
		<name>: Order.Attribute(<name>, <default>, <'public' || 'protected' || 'private'>, 
				type=netlib.objects.Constants.ARG_<type>, desc=<description>)
	}

	do(self):
		Does the actual order

	turns(self, turns=0):
		Returns the number of turns taken to complete the order

	resources(self):
		Returns the number and type of resources used by the order

	fn_<name>(self, value=None):
		Returns and sets the data for a "protected" order. 

"Features"
--------------------------------------------------
The __init__ will most probably never get called so don't bother using one.
Any public or protected attribute MUST have a type and a description.
Only non-default attributes listed in the attribute dictionary will be saved.

How actions work
==================================================
Actions occur without player interaction. An example would be combat which
occurs whenever the two ships of opposing sides are at the same position.
See sactions for examples.

