
import copy
import pickle
import time

import config

try:
	from tp import netlib
except ImportError:
	import sys
	sys.path.append("../")
	import netlib

OK = netlib.objects.OK
Fail = netlib.objects.Fail
Sequence = netlib.objects.Sequence
constants = netlib.objects.constants

import db
# Connect to the database
db.connect()

# Base objects
from sbases.SQL     import NoSuch
from sbases.Board   import Board
from sbases.Message import Message
from sbases.Object  import Object
from sbases.Order   import Order
from sbases.User    import User

from sobjects.Fleet		import Fleet
from sorders.NOp        import NOp
from sorders.Move       import Move
from sorders.BuildFleet import BuildFleet
from sorders.SplitFleet import SplitFleet

class FullConnection(netlib.ServerConnection):
	def __init__(self, *args, **kw):
		netlib.ServerConnection.__init__(self, *args, **kw)
		self.pid = 0

	def OnLogin(self, packet):
		# We need username and password
		self.pid = User.realid(packet.username, packet.password)
	
		if self.pid == -1:
			self.pid = 0
			self._send(Fail(packet.sequence, constants.FAIL_NOSUCH, "Login incorrect or unknown username!"))
		else:
			self._send(OK(packet.sequence, "Login Ok!"))
			return True

	def OnObject_GetById(self, packet):
		if not self.pid:
			return False

		self._send(Sequence(packet.sequence, len(packet.ids)))

		for id in packet.ids:
			try:
				self._send(Object(id).to_packet(packet.sequence))
			except NoSuch:
				self._send(Fail(packet.sequence, constants.FAIL_NOSUCH, "No such object."))

		return True
		
	def OnObject_GetByPos(self, packet):
		if not self.pid:
			return False

		objects = Object.bypos(packet.pos, packet.size)

		self._send(Sequence(packet.sequence, len(objects)))

		for object in objects:
			self._send(object.to_packet(packet.sequence))

	def OnOrder_Get(self, packet):
		if not self.pid:
			return False

		self._send(Sequence(packet.sequence, len(packet.slots)))

		for slot in packet.slots:
			try:
				order = Order(packet.id, slot)

				# Are we allowed to access this?
				if order.object.owner != self.pid:
					self._send(Fail(packet.sequence, constants.FAIL_NOSUCH, "No such order."))
				else:	
					self._send(order.to_packet(packet.sequence))
			except NoSuch:
				self._send(Fail(packet.sequence, constants.FAIL_NOSUCH, "No such order."))

		return True

	def OnOrder_Insert(self, packet):
		if not self.pid:
			return False

		try:
			order = Order(packet=packet)
			
			# Are we allowed to do this?
			if order.object.owner != self.pid:
				self._send(Fail(packet.sequence, constants.FAIL_NOSUCH, "Permission denied."))
			else:	
				order.insert()
				self._send(OK(packet.sequence, "Order added."))
		except NoSuch:
			self._send(Fail(packet.sequence, constants.FAIL_NOSUCH, "Order adding failed."))

		return True

	OnOrder = OnOrder_Insert

	def OnOrderDesc_Get(self, packet):
		if not self.pid:
			return False

		self._send(Sequence(packet.sequence, len(packet.ids)))

		for id in packet.ids:
			try:
				self._send(Order.desc_packet(packet.sequence, id))
			except NoSuch:
				self._send(Fail(packet.sequence, constants.FAIL_NOSUCH, "No such order type."))

		return True

	def OnOrder_Remove(self, packet):
		if not self.pid:
			return False

		self._send(Sequence(packet.sequence, len(packet.slots)))

		for slot in packet.slots:
			try:
				order = Order(packet.id, slot)
				
				# Are we allowed to do this?
				if order.object.owner != self.pid:
					self._send(Fail(packet.sequence, constants.FAIL_NOSUCH, "No such order."))
				else:	
					order.remove()
					self._send(OK(packet.sequence, "Order removed."))
			except NoSuch:
				self._send(Fail(packet.sequence, constants.FAIL_NOSUCH, "No such order."))

		return True

	def OnBoard_Get(self, packet):
		if not self.pid:
			return False

		self._send(Sequence(packet.sequence, len(packet.ids)))

		for id in packet.ids:
			try:
				self._send(Board(Board.realid(id, self.pid)).to_packet(packet.sequence))
			except NoSuch:
				self._send(Fail(packet.sequence, constants.FAIL_NOSUCH, "No such board."))

		return True
	
	def OnMessage_Get(self, packet):
		if not self.pid:
			return False

		self._send(Sequence(packet.sequence, len(packet.slots)))

		for slot in packet.slots:
			try:
				message = Message(Board.realid(packet.id, self.pid), slot)
				self._send(message.to_packet(packet.sequence))
			except NoSuch:
				self._send(Fail(packet.sequence, constants.FAIL_NOSUCH, "No such message."))

		return True

	def OnMessage_Insert(self, packet):
		if not self.pid:
			return False

		try:
			# Mangle the board id
			packet.id = Board.realid(packet.id, self.pid)

			message = Message(packet=packet)
			message.insert()
			self._send(OK(packet.sequence, "Message added."))
		except NoSuch:
			self._send(Fail(packet.sequence, constants.FAIL_NOSUCH, "Message adding failed."))

		return True

	OnMessage = OnMessage_Insert

	def OnMessage_Remove(self, packet):
		if not self.pid:
			return False

		self._send(Sequence(packet.sequence, len(packet.slots)))

		for slot in packet.slots:
			try:
				message = Message(Board.realid(packet.id, self.pid), slot)
				message.remove()
				self._send(OK(packet.sequence, "Message removed."))
			except NoSuch:
				self._send(Fail(packet.sequence, constants.FAIL_NOSUCH, "No such message."))

		return True

	def _send(self, packet):
		time.sleep(config.lag/1000.0)
		return netlib.ServerConnection._send(self, packet)

class FullServer(netlib.Server):
	handler = FullConnection

	def __init__(self, host, port="6923"):
		netlib.Server.__init__(self, host, port)

	def endofturn(self, sig, frame):
		packet = netlib.objects.TimeRemaining(0, 0)
		for connection in self.connections:
			connection._send(packet)

def main():
	# Connect to the database
	db.connect()

	port = 6923
	while True:
		try:
			s = FullServer("", port=port)
			print "Used port", port
		except:
			print "This port in use...", port
			port += 1
			continue
		try:
			import signal

			signal.signal(signal.SIGUSR1, s.endofturn)
		except ImportError:
			pass

		# Import all the order_desc from the database
		Order.load_all()
		print netlib.objects.OrderDescs()

		s.serve_forever()

if __name__ == "__main__":
	main()

