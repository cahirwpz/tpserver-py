
import math
import sys
import traceback

import config
db = config.db
netlib = config.netlib

from sbases.Object import Object
from sbases.Order import Order

def WalkUniverse(top, callback, *args, **kw):
	"""\
	Walks around the universe and calls a command for each object.
	Parents will be called before there parents.
	"""
	callback(top, *args, **kw)

	for id in top.contains():
		WalkUniverse(Object(id), callback, *args, **kw)
		
def OrderGet(top, d={}):

	def o(top, d=d):
		if top.orders() > 0:
			# Find the first valid order on this object
			while True:
				order = Order(top.id, 0)

				if False:
					order = None
				else:
					break

			if not d.has_key(order.type):
				d[order.type] = []

			d[order.type].append(order)

	WalkUniverse(top, o)

def main():
	# Connect to the database
	db.query("BEGIN")

	try:
		# Clean up any phoney orders

		# Get all the orders
		d = {}
		OrderGet(Object(0), d)

		for type in d.keys():
			print type
			if not d.has_key(type):
				continue

			# Import the order processor
			for order in d[type]:
				print order
				order.do()
		
		# Resolve combat (walk the universe and find all objects at a point...)
		


		# Cleanup any "dead" objects
		
		# Reparent the universe



		
	except Exception, e:
		db.query("ROLLBACK")
		raise
	else:
		db.query("COMMIT")
	
if __name__ == "__main__":
	main()


