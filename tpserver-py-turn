
import math

import db

from server import Order, Object

def OrderGet(top, d={}):
	if top.orders() > 0:
		order = Order(top.id, 0)

		if not d.has_key(order.type):
			d[order.type] = []

		d[order.type].append(order)

	# Walk around the universe and build a global order list
	for id in top.contains():
		OrderGet(Object(id), d)

def NOp(order):
	order.wait -= 1

	if order.wait <= 0:
		order.remove()
	else:
		order.save()

def Move(order):
	# We are going to have to modify the object so lets load it
	obj = Object(order.oid)

	# Is this the first time we are moving?
	if (obj.velx, obj.vely, obj.velz) == (0,0,0):
		# Set the velocity
		obj.velx = math.ceil((order.pos[0] - obj.posx) / 2)
		obj.vely = math.ceil((order.pos[1] - obj.posy) / 2)
		obj.velz = math.ceil((order.pos[2] - obj.posz) / 2)

	# Move the object
	obj.posx, obj.poxy, obj.posz = obj.posx + obj.velx, obj.posy + obj.vely, obj.posz + obj.velz
	
	# Reparent the object
	parents = Object.bypos([obj.posx, obj.posy, obj.posz], radius=0)
	obj.parent = obj.id
	while obj.parent == obj.id:
		if len(parents) > 0:
			obj.parent = parents.pop(-1).id
			continue
		else:
			obj.parent = -1

	# Make sure that we haven't missed the object
	if (order.pos[0] - obj.posx) / obj.velx < 0 or \
		(order.pos[1] - obj.posy) / obj.vely < 0 or \
		(order.pos[2] - obj.posz) / obj.velz < 0:
		obj.posx, obj.posy, obj.posz = order.pos

	pos = obj.posx, obj.posy, obj.posz
	if order.pos == pos:
		obj.velx = obj.vely = obj.velz = 0
		order.remove()

		message = Message()
		message.subject = "%s arrived" % object.name
		message.body = """%s has arrive at it's destination.""" % object.name
		message.save()
	else:
		obj.save()

def BuildFleet(order):
	# We need information from the builder...
	builder = Object(order.oid)

	if not hasattr(builder, "owner"):
		# Ekk we can't build an object if we don't have an owner...
		print "Could not do a build order because it was on an unownable object."
		order.remove()
	
	object = Object()

	# Type Fleet
	object.type = 4
	object.name = "New fleet"
	object.size = 1

	# Parent the object
	object.parent = builder.parent
	
	# Put it at the position
	object.posx = builder.posx
	object.posy = builder.posy
	object.posz = builder.posz

	object.velx = 0
	object.vely = 0
	object.velz = 0

	object.owner = builder.owner

	object.save()

	message = Message()
	message.subject = "%s built" % object.new
	message.body = """%s has arrive at it's destination.""" % object.new
	message.save()


process_order = [1, 0]
def main():
	# Connect to the database
	db.connect()

	# Get all the orders
	d = {}
	OrderGet(Object(0), d)

	for type in process_order:
		if not d.has_key(type):
			continue

		if type == 0:
			function = NOp
		elif type == 1:
			function = Move
		elif type == 2:
			function = BuildFleet

		# Import the order processor
		for order in d[type]:
			print order
			function(order)
			
if __name__ == "__main__":
	main()


