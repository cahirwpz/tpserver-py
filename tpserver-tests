#!/usr/bin/env python

import sys, logging, unittest

sys.path.insert(0, '.')
sys.path.insert(0, 'tests')
sys.path.insert(0, 'libtpproto2-py')

from twisted.python.log import PythonLoggingObserver
from tp.server.logger import Formatter
from tp.server.model import DatabaseManager

from configuration import CLIConfigurator, ConfigurationError
from configuration import DatabaseConfiguration

from client import ThousandParsecClientFactory, ThousandParsecClientFactoryConfiguration

def main():
	formatter = Formatter( '%(asctime)s [%(name)s] %(message)s', '%Y-%m-%d %H:%M:%S' )

	handler = logging.StreamHandler()
	handler.setFormatter( formatter )

	logging.root.name = 'tests'
	logging.root.addHandler( handler )
	logging.root.setLevel( logging.DEBUG )

	logger = logging.getLogger('sqlalchemy.engine')
	logger.setLevel( logging.WARNING )

	observer = PythonLoggingObserver()
	observer.start()

	logger = logging.getLogger('twisted')
	logger.setLevel( logging.WARNING )

	configurator = CLIConfigurator( "Thousand Parsec Test Client" )
	configurator.registerComponent( ThousandParsecClientFactory(), ThousandParsecClientFactoryConfiguration() )
	configurator.registerComponent( DatabaseManager(), DatabaseConfiguration() )

	try:
		configurator.configParse()
		configurator.configCommit()
	except ConfigurationError, ex:
		configurator.help()

		raise SystemExit( '\033[31;1mConfiguration error:\033[0m %s' % ex )

	import testcases

	suite = unittest.TestLoader().loadTestsFromModule( testcases )
	unittest.TextTestRunner( verbosity = 2 ).run( suite )

if __name__ == '__main__':
	main()
